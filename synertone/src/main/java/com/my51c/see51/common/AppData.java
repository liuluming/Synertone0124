//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : See51
//  @ File Name : AppData.java
//  @ Date : 2012-5-30
//  @ Author : Eric Guo <gjl@my51c.com>
//
//

package com.my51c.see51.common;

import android.app.Activity;
import android.app.Application;
import android.app.NotificationManager;
import android.content.Context;
import android.graphics.Typeface;
import android.os.Environment;
import android.util.Log;

import com.android.volley.RequestQueue;
import com.android.volley.toolbox.Volley;
import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.mapapi.model.LatLng;
import com.lidroid.xutils.HttpUtils;
import com.my51c.see51.app.bean.AccountModel;
import com.my51c.see51.data.AccountInfo;
import com.my51c.see51.data.Device;
import com.my51c.see51.data.DeviceList;
import com.my51c.see51.data.Group;
import com.my51c.see51.data.SelectionDevice;
import com.my51c.see51.media.RemoteInteractionStreamer;
import com.my51c.see51.service.GVAPService;
import com.my51c.see51.service.GvapEvent.GvapEventListener;
import com.my51c.see51.service.LocalService;
import com.synertone.commonutil.util.CrashHandler;
import com.synertone.netAssistant.R;

import org.litepal.LitePal;

import java.io.File;
import java.lang.ref.WeakReference;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;



public class AppData extends Application {
    private static final String TAG = "AppData--------->";
    // mkadd
    public static Context mContext;
    public static Typeface fontXiti;// 表示细体字体
    public static Typeface fontPutu;// 表示常规字体
    public static AccountModel accountModel;
    static private String wokringPath;
    private static AppData mInstance;
    private static NotificationManager nm;
    public String targetId = "";
    public LocationClient mLocationClient;
    public BDLocation mLocation;
    public LatLng mLatLng;
    private AccountInfo userAccount;
    private DeviceList pubList;
    private Map<String, DeviceList> mapGroPublist;
    private DeviceList localList;
    private GVAPService gvapService;
    private LocalService localService;
    private GvapEventListener mainActivity;
    private boolean reLogin = false;
    private RemoteInteractionStreamer gRemoteStreamer;
    private List<SelectionDevice> m_selectdevice;
    private LinkedList<Activity> mActivityList = new LinkedList<Activity>();
    // 当前显示的Activity
    private Activity resumeActivity;
    private Map<String, Thread> downLoadThreads;
    private MyLocationListener mMyLocationListener;
    private List<WeakReference<Activity>> guideActivityList = new LinkedList<WeakReference<Activity>>();
    private List<Activity> actList;
    public static RequestQueue mRequestQueue;
    public static HttpUtils http;
    public static List<String> migIdList=new ArrayList<>();

    /**
     * 单例模式中获取唯一的MyApplication实例
     *
     * @return
     */
    public static AppData getInstance() {
        if (null == mInstance) {
            mInstance = new AppData();
        }
        return mInstance;
    }

    /**
     * 获取Context.
     *
     * @return
     */
    public static Context getContext() {
        return mContext;
    }

    static public String getWokringPath() {
        return wokringPath;
    }

    public static NotificationManager getNotificationManager() {
        return nm;
    }

    public List<SelectionDevice> getM_selectdevice() {
        return m_selectdevice;
    }

    public void setM_selectdevice(List<SelectionDevice> m_selectdevice) {
        this.m_selectdevice = m_selectdevice;
    }

    @Override
    public void onCreate() {
        // yunzhixun service 20161117hyw added
        //startService(new Intent(this, ConnectionService.class));
        Log.e("AppData--------->", "startServices-------->>>>>");
        super.onCreate();
        new Thread(new Runnable() {
            @Override
            public void run() {
                initNormalData();
            }
        }).start();
        //initNormalData();
        mLocationClient = new LocationClient(this.getApplicationContext());
        mMyLocationListener = new MyLocationListener();
        mLocationClient.registerLocationListener(mMyLocationListener);
        initNetWork();



    }

    private void initNormalData() {
        fontXiti = Typeface.createFromAsset(getAssets(), "fonts/xiti.otf");
        fontPutu = Typeface.createFromAsset(getAssets(), "fonts/changgui.otf");

        // ��ʼ������
        userAccount = new AccountInfo("guest", "guest");
        pubList = new DeviceList();
        actList = new ArrayList<>();
        localList = new DeviceList();
        gvapService = new GVAPService();
        localService = new LocalService();
        mapGroPublist = Collections
                .synchronizedMap(new HashMap<String, DeviceList>());

        String sDStateString = Environment.getExternalStorageState();
        if (sDStateString.equals(Environment.MEDIA_MOUNTED)) {
            // 获取扩展存储设备的文件目录
            File SDFile = Environment.getExternalStorageDirectory();
            wokringPath = (SDFile.getAbsolutePath() + File.separator
                    + getResources().getString(R.string.app_name) + File.separator);
        }

        /* 云之讯开始 */
        // 崩溃日志保存
        CrashHandler crashHandler = CrashHandler.getInstance();
        crashHandler.init(getApplicationContext());
        mInstance = this;
        nm = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
        //  ImgCache.getInstance().init(this);

        // 保存一些系统常量
        //YZXContents.setContext(this);
        /* 云之讯结束 */

        Log.d("AppData", "onCreate!");
        LitePal.initialize(this);
    }

    private void initNetWork() {
        AppData.mRequestQueue = Volley.newRequestQueue(getApplicationContext());
        http = new HttpUtils();
        http.configTimeout(15000);
        http.configSoTimeout(15000);
        http.configCurrentHttpCacheExpiry(500);
    }

    /**
     * 添加Activity到容器中
     *
     * @param activity
     */
    public void MKaddActivity(Activity activity) {
        if (mActivityList == null) {
            mActivityList = new LinkedList<Activity>();
        }
        mActivityList.add(activity);
    }

    /**
     * 遍历所有Activity并finish
     */
    public void MKexit() {
        if (mActivityList == null) {
            return;
        }
        for (Activity activity : mActivityList) {
            if (activity != null)
                activity.finish();

        }
        mActivityList.clear();
        mActivityList = null;
    }

    public void removeAct(Activity act) {
        this.actList.remove(act);
    }
    public void createGVAPService() {
        gvapService = new GVAPService();
    }

    public boolean getNetStatus() {
        if (gvapService != null) {
            return gvapService.bNetStatus;
        }

        return false;
    }

    public void setNetStatus(boolean bNet) {
        if (gvapService != null) {
            gvapService.bNetStatus = bNet;
        }
    }

    public boolean init() {

        // 启动服务
        localService.init(localList, this);
        gvapService.init();
        gvapService.start();
        m_selectdevice = new ArrayList<SelectionDevice>();
        return true;
    }

    public boolean initLocalService() {
        localList = new DeviceList();
        localService.init(localList, this);
        return false;
    }

    public boolean addSelectionDev(SelectionDevice indev) {
        boolean bSucc = false;
        boolean bFound = false;
        SelectionDevice dev = null;
        int i = 0;
        for (i = 0; i < m_selectdevice.size(); i++) {
            dev = m_selectdevice.get(i);
            if (indev.getDeviceid().equals(dev.getDeviceid())
                    && indev.isLocal() == dev.isLocal()) {
                bFound = true;
                break;
            }
        }

        if (bFound) {
            m_selectdevice.remove(i);
            m_selectdevice.add(indev);
            bSucc = true;
        } else {
            if (m_selectdevice.size() < 4) {
                m_selectdevice.add(indev);
                bSucc = true;
            }
        }

        return bSucc;
    }

    public boolean removeSelectDev(SelectionDevice indev) {
        boolean bSucc = false;
        boolean bFound = false;
        SelectionDevice dev = null;

        int i = 0;
        for (i = 0; i < m_selectdevice.size(); i++) {
            dev = m_selectdevice.get(i);
            if (indev.getDeviceid().equals(dev.getDeviceid())
                    && indev.isLocal() == dev.isLocal()) {
                bFound = true;
                break;
            }
        }

        if (bFound) {
            m_selectdevice.remove(i);
            bSucc = true;
        }
        return bSucc;
    }

    public void clearSelectDev() {
        if (m_selectdevice != null) {
            m_selectdevice.clear();
        }
    }

    // 刷新本地列表时，更新选中的设备(m_selectdevice)
    public void checkLocalDeviceList() {
        int i = 0;
        SelectionDevice seldev = null;
        for (i = 0; i < m_selectdevice.size(); i++) {
            seldev = m_selectdevice.get(i);
            boolean bfound = false;
            Device mkeepdev = null;
            synchronized (localList) {

                for (Device dev : localList) {
                    mkeepdev = dev;
                    if (seldev.isLocal()
                            && seldev.getDeviceid().equals(dev.getID())) {
                        bfound = true;
                        break;
                    }
                }

            }

            if (seldev.isLocal() && bfound == false) {
                if (mkeepdev != null)
                    mkeepdev.setbLocalSelected(false);
                removeSelectDev(seldev);
            }

        }
    }

    public void release() {
        localService.release();
        gvapService.release();
        m_selectdevice.clear();
        m_selectdevice = null;
    }

    public DeviceList getPublicList() {
        return pubList;
    }

    public DeviceList getLocalList() {
        return localList;
    }

    public GVAPService getGVAPService() {
        return gvapService;
    }

    public AccountInfo getAccountInfo() {
        return userAccount;
    }

    public void setAccountInfo(AccountInfo account) {
        this.userAccount = account;
    }

    public LocalService getLocalService() {
        return localService;
        // if (localService.isInit()){
        // return localService;
        // }else{
        // return null;
        // }
    }

    public void addActivity(WeakReference<Activity> activity) {
        guideActivityList.add(activity);
    }

    // 遍历所有Activity并finish
    public void exit() {
        for (WeakReference<Activity> activity : guideActivityList) {
            Activity temp = activity.get();
            if (temp != null) {
                temp.finish();
            }
        }
    }




    /**
     * @return the mainActivity
     */
    public GvapEventListener getMainActivity() {
        return mainActivity;
    }

    /**
     * @param mainActivity the mainActivity to set
     */
    public void setMainActivity(GvapEventListener mainActivity) {
        this.mainActivity = mainActivity;
    }

    /**
     * @return the reLogin
     */
    public boolean isReLogin() {
        return reLogin;
    }

    /**
     * @param reLogin the reLogin to set
     */
    public void setReLogin(boolean reLogin) {
        this.reLogin = reLogin;
    }

    /**
     * 添加公共的列表
     *
     * @param groupId 组的ID
     */
    public void addPubList(Group parent_group, String grandParent_group) {
        if (!mapGroPublist.containsKey(parent_group)) {
            DeviceList devList = new DeviceList();
            devList.setParent_group(parent_group);
            String groupId = parent_group.getGroupID();
            if (grandParent_group != null) {
                devList.setGrandParent_group(grandParent_group);
            }
            synchronized (this) {
                mapGroPublist.put(groupId, devList);
            }
        }

    }

    /**
     * 获取公共账户下的组的列表
     *
     * @param groupId 组的ID
     * @return 设备列表
     */
    public DeviceList getDevList(String groupId) {
        DeviceList devList = this.mapGroPublist.get(groupId);
        if (devList != null)
            return devList;
        return null;
    }

    public RemoteInteractionStreamer getRemoteInteractionStreamer() {
        return gRemoteStreamer;
    }

    public void setRemoteInteractionStreamer(RemoteInteractionStreamer l) {
        gRemoteStreamer = l;
    }

	/* yunzhixun kaishi */

    // 存放下载线程
    public synchronized void putThread(String msgId, Thread t) {
        if (downLoadThreads == null) {
            downLoadThreads = Collections
                    .synchronizedMap(new HashMap<String, Thread>());
        }
        downLoadThreads.put(msgId, t);
        Log.i(TAG, "putThread msgId = " + msgId);
    }

    // 获取下载线程
    public synchronized Thread getThread(String msgId) {
        if (msgId != null && downLoadThreads != null) {
            Log.i(TAG, "getThread msgId = " + msgId);
            return downLoadThreads.get(msgId);
        }
        return null;
    }

    public synchronized Thread removeThread(String msgId) {
        if (msgId != null && downLoadThreads != null
                && downLoadThreads.containsKey(msgId)) {
            Log.i(TAG, "removeThread msgId = " + msgId);
            return downLoadThreads.remove(msgId);
        }
        return null;
    }

    public Activity getResumeActivity() {
        return resumeActivity;
    }

    public void setResumeActivity(Activity resumeActivity) {
        this.resumeActivity = resumeActivity;
    }

	/*
	 * public static AppData getInstance() { return mInstance; }
	 */

    /**
     * 实现实位回调监听
     */
    public class MyLocationListener implements BDLocationListener {

        @Override
        public void onReceiveLocation(BDLocation location) {
            if (location == null) {
                return;
            }
            mLocation = location;
            mLatLng = new LatLng(location.getLatitude(), location.getLongitude());
            //Toast.makeText(getApplicationContext(), mLatLng.toString(), 0).show();
            // setGpsInfo(location);
        }


    }
	/* yunzhixun jieshu */

    @Override
    protected void attachBaseContext(Context base) {
        super.attachBaseContext(base);
    }
}
