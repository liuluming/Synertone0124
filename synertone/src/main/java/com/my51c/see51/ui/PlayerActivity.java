//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : See51
//  @ File Name : PlayerActivity.java
//  @ Date : 2012-5-30
//  @ Author : Eric Guo <gjl@my51c.com>
//
//

package com.my51c.see51.ui;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.drawable.Drawable;
import android.media.AudioManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.provider.Settings;
import android.support.v4.app.FragmentActivity;
import android.support.v7.app.ActionBar;
import android.text.format.Time;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.GestureDetector;
import android.view.GestureDetector.OnDoubleTapListener;
import android.view.GestureDetector.OnGestureListener;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.WindowManager;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.view.inputmethod.InputMethodManager;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ViewFlipper;

import com.my51c.see51.adapter.CommentAdapter;
import com.my51c.see51.common.AppData;
import com.my51c.see51.listener.OnAVQSetListener;
import com.my51c.see51.listener.OnAlarmEnableListener;
import com.my51c.see51.listener.OnIntercomListener;
import com.my51c.see51.media.AACRecord;
import com.my51c.see51.media.H264toMP4;
import com.my51c.see51.media.LocalMediaStreamer;
import com.my51c.see51.media.MediaStreamFactory;
import com.my51c.see51.media.MediaStreamer;
import com.my51c.see51.media.MediaStreamer.MediaEvent;
import com.my51c.see51.media.MediaStreamer.MediaEventListener;
import com.my51c.see51.media.MediaStreamer.VideoFrame;
import com.my51c.see51.media.VideoDecoder;
import com.my51c.see51.media.VideoDecoderFactory;
import com.my51c.see51.service.LocalService;
import com.my51c.see51.widget.DeviceListView;
import com.my51c.see51.widget.DeviceListView.OnRefreshListener;
import com.my51c.see51.widget.LocUtil;
import com.my51c.see51.widget.MyComment;
import com.my51c.see51.widget.MyLoadingDialog;
import com.my51c.see51.widget.MyVideoSurface;
import com.my51c.see51.widget.ScreenBean;
import com.my51c.see51.widget.ToastCommom;
import com.my51c.see51.widget.VideoRender;
import com.spoledge.aacdecoder.MultiPlayer;
import com.synertone.netAssistant.R;
import com.xqe.method.DelEditText;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.lang.ref.WeakReference;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class PlayerActivity extends FragmentActivity implements
        OnClickListener, MediaEventListener, OnRefreshListener,
        OnDoubleTapListener, OnGestureListener, OnTouchListener {

    final static int LEFT_START_LINE = 5;
    private static final int POLL_INTERVAL = 300;
    private static final int MSG_TIME_OUT = 1;
    private static final int MSG_DISCONNECT = 2;
    private static final int MSG_GET_IFRAME = 3;
    private static final int MSG_SNAP_OK = 4;
    private static final int MSG_NONE_NETWORK = 5;
    private static final int MSG_INVALID_IP = 7;
    private static final int MSG_INIT_FAIL = 8;
    private static final int MSG_STOP_RECORD = 9;
    private static final int MSG_START_INTERCOMM = 10;
    private static final int MSG_INTERCOMM_REQ_FAIL = 11;
    private static final int MSG_ALARM_STATE_CHANGED = 12;
    private static final int MSG_AVQ_CHANGED = 13;
    private static final int MSG_TUTK_FAIL = 14;
    private static final int MSG_GET_IFRAME_TUTK = 15;
    private static final int MSG_GET_COMMENT_SUCCESS = 16;
    private static final int MSG_GET_COMMENT_FAILED = 17;
    private static final int MSG_POST_COMMENT_SUCCESS = 18;
    private static final int MSG_POST_COMMENT_FAILED = 19;
    private static final int MSG_POST_COMMENT_NULL = 20;
    private static long lastClickTime = 0;
    private final String TAG = "PlayerActivity";
    public int scrennFlag;
    public ArrayList<MyComment> commentList = new ArrayList<MyComment>();
    ImageButton btnPause;
    Button btnSnapshoot;
    Button btnRecord;
    Button btnZoomIn;
    Button btnZoomOut;
    Button btnAlarm;
    Button btnDefinition;
    Button btnIntercom;
    ImageButton btnAutoScanV;
    ImageButton btnAutoScanH;
    ImageButton btnAutoScanStop;
    ImageButton btnAutoScanReset;
    Button btnFlipH;
    Button btnFlipV;
    Button btnAudio;
    H264toMP4 recorder;
    int fps;
    DrawSurfaceRunnable drawSurfaceRunnable = new DrawSurfaceRunnable();
    InputMethodManager inputMethodManager;
    ProgressDialog pd;
    MyLoadingDialog waitdialog;
    ToastCommom toast = new ToastCommom();
    ActionBar actionBar;
    private MediaStreamer mediaStreamer;
    private MediaStreamer mediaStreamer_tutk;//add by marshal
    private MediaStreamer mediaStreamer_51see;
    private VideoDecoder videoDecoder;
    private String deviceID;
    private String deviceversion;
    private String devicename;
    private VideoRender videoRender;
    //private  GLSurfaceView glSurfaceView;
    private MyVideoSurface glSurfaceView;
    private ViewFlipper viewFlipper;
    private View landScapeControlBar;
    private GestureDetector gestureDetector;
    private RelativeLayout progressBarView;
    private Thread drawSurfaceThread;
    private Thread getIFrameThread;
    private Thread getIFrameThread_tutk;
    private MultiPlayer multiPlayer;
    private PipedInputStream audioInputStream;
    private VideoFrame[] frames;
    private VideoFrame[] frames_tutk;
    private VideoFrame[] frames_51see;
    private int iFrameIndex;
    private RecState recState = RecState.STOP;
    private RecState preState = RecState.STOP;
    private int nDecodeHander = -1;
    private File imageFile;
    private File videoFile;
    private boolean snap;
    private int nVideoWidth = 640;
    private int nVideoHeight = 480;
    private volatile Boolean forceExitThread = false;  //强制结束线程时设置此标志位
    private AlertDialog timeoutAlertDialog;
    private AlertDialog lostConnectionAlertDialog;
    private AlertDialog nonetworkAlertDialog;
    private AlertDialog invalidIPAlertDialog;
    private AlertDialog initFailedAlertDialog;
    private int flag = 1;
    private LinearLayout del_re;
    private View rcChat_popup;
    /**
     * progressbar !
     */
    private LinearLayout voice_rcd_hint_loading;
    /**
     * recoding
     */
    private LinearLayout voice_rcd_hint_rcding;
    /**
     * error !
     */
    private LinearLayout voice_rcd_hint_tooshort;
    private boolean isShosrt = false;
    private ImageView img1;
    private ImageView sc_img1;
    private ImageView volume;
    private double lastFingerDis = -1.0;
    private int connect_status_51see = 0;//0--no connect; 1--local; 2--51see connect; 3--tutk connected, 51see video pause
    private int connect_status_tutk = 0;//0--no connect; 1---tutk connect
    private boolean isLocal;
    private AppData appData;
    private Button menuBtn;
    private TextView titleName;
    private LinearLayout backLayout;
    private RelativeLayout topLayout;
    private LocalService localService;
    private AudioManager audioManager;
    private int maxVolume, curVolume;
    private DeviceListView commentListView;
    private DelEditText commentEt;
    Handler commentHandler = new Handler() {

        @Override
        public void handleMessage(Message msg) {

            switch (msg.what) {
                case MSG_GET_COMMENT_SUCCESS:
                    commentListView.
                            setAdapter(new CommentAdapter(getApplicationContext(), commentList));
                    break;
                case MSG_GET_COMMENT_FAILED:
                    toast.ToastShow(getApplicationContext(), "获取评论失败，请检查网络", 1000);
                    //listview上显示： 获取评论失败，请检查网络
                    break;
                case MSG_POST_COMMENT_SUCCESS:
                    toast.ToastShow(getApplicationContext(), "发表成功", 1000);
                    new Thread(httpGetThread).start();
                    commentEt.setText("");
                    getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
                    break;
                case MSG_POST_COMMENT_FAILED:
                    toast.ToastShow(getApplicationContext(), "发表评论失败，请检查网络", 1000);
                    break;
                case MSG_POST_COMMENT_NULL:
                    toast.ToastShow(getApplicationContext(), "评论内容不能为空", 1000);
                    break;

                default:
                    break;
            }
            super.handleMessage(msg);
        }

    };
    Runnable httpGetThread = new Runnable() {

        @Override
        public void run() {
            // TODO Auto-generated method stub
            try {
                commentList.clear();
                URL url = new URL("http://user.hddvs.net:8080/api/GetCommentAction.php?deviceid=" + deviceID);
                HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                InputStreamReader in = new InputStreamReader(conn.getInputStream());
                BufferedReader bufferedReader = new BufferedReader(in);
                String result = "";
                String readLine = null;
                while ((readLine = bufferedReader.readLine()) != null) {
                    result += readLine;
                }
                in.close();
                conn.disconnect();
                System.out.println("请求结果：" + result);
                parserResult(result);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    };
//	private Lock tutk_lock = new ReentrantLock();
    Runnable httpPostThread = new Runnable() {

        @Override
        public void run() {
            // TODO Auto-generated method stub
            try {
                String commentStr = commentEt.getText().toString();
                String username = appData.getAccountInfo().getUsername();
                if (commentStr.equals("")) {
                    //评论内容不能为空
                    commentHandler.sendEmptyMessage(MSG_POST_COMMENT_NULL);
                } else {
                    URL url = new URL("http://user.hddvs.net:8080/api/CommentAction.php");
                    StringBuffer params = new StringBuffer();
                    params.append("deviceid").append("=").append(deviceID).append("&")
                            .append("comment").append("=").append(commentStr).append("&")
                            .append("username").append("=").append(username);
                    HttpURLConnection urlConn = (HttpURLConnection) url.openConnection();
                    urlConn.setDoInput(true);
                    urlConn.setDoOutput(true);//是否输入参数
                    urlConn.setRequestMethod("POST");
                    urlConn.setRequestProperty("accept", "*/*");
                    urlConn.setRequestProperty("connection", "Keep-Alive");
                    urlConn.setUseCaches(false);
                    byte[] bypes = params.toString().getBytes();
                    urlConn.connect();//链接即往服务端发送消息
                    OutputStream out = urlConn.getOutputStream();
                    out.write(bypes);//发送参数
                    out.flush();
                    out.close();

                    //接收
                    InputStreamReader in = new InputStreamReader(urlConn.getInputStream());
                    BufferedReader bufferedReader = new BufferedReader(in);
                    String result = "";
                    String readLine = null;
                    while ((readLine = bufferedReader.readLine()) != null) {
                        result += readLine;
                    }
                    bufferedReader.close();
                    urlConn.disconnect();
                    System.out.println("接收结果：" + result);
                    JSONObject jo = new JSONObject(result);
                    String status = jo.getString("status");
                    if (status.equals("1")) {
                        commentHandler.sendEmptyMessage(MSG_POST_COMMENT_SUCCESS);
                    } else {
                        //发表评论失败
                    }
                }
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } finally {
            }
        }
    };
    private Button publishBtn;
    private ScreenBean screenBean;
    private MyHandler mHandler = new MyHandler(this);
    Runnable getIFrameRunnable = new Runnable() {

        @Override
        public void run() {
            // TODO Auto-generated method stub
            while (frames_51see[iFrameIndex] == null ||
                    !frames_51see[iFrameIndex].isKeyFrame()) {
                //iFrameIndex = (iFrameIndex+1)%2;
                if (mediaStreamer_51see != null)
                    frames_51see[iFrameIndex] = mediaStreamer_51see.getOneVideoFrame(200);
                if (forceExitThread) {
                    break;                //强制结束线程时设置此标志位
                }

                if (frames_51see[iFrameIndex] == null) {
                    continue;
                }
            }
            if (!forceExitThread) {
                //Log.d("PlayActivity", "get iFrame ");
                fps = frames_51see[iFrameIndex].getFrameRate();
                mHandler.sendEmptyMessage(MSG_GET_IFRAME);   //接收到关键帧，开始播放线程
            }
        }

    };
    Runnable getIFrameRunnable_tutk = new Runnable() {

        @Override
        public void run() {
            // TODO Auto-generated method stub
            while (frames_tutk[iFrameIndex] == null ||
                    !frames_tutk[iFrameIndex].isKeyFrame()) {
                //iFrameIndex = (iFrameIndex+1)%2;
                if (mediaStreamer_tutk != null) {
                    frames_tutk[iFrameIndex] = mediaStreamer_tutk.getOneVideoFrame(200);
                }
                if (forceExitThread) {
                    break;
                }

                if (frames_51see[iFrameIndex] == null) {
                    continue;
                }
            }
            if (!forceExitThread) {
                //Log.d("PlayActivity", "get iFrame ");
                fps = frames_tutk[iFrameIndex].getFrameRate();
                mHandler.sendEmptyMessage(MSG_GET_IFRAME_TUTK);
            }
        }

    };
    private boolean connected = false;
    private boolean isRecording = false;
    private volatile boolean enableAudio = false;
    private boolean enableIntercom = false;
    private Thread audioThread;
    /*
    private Runnable audioRunnable = new Runnable() {

        @Override
        public void run() {
            // TODO Auto-generated method stub
            FileOutputStream fileOutputStream = null;
            mediaStreamer.createAudioStream();
            try {
                audioInputStream = new PipedInputStream(mediaStreamer.getAudioStream());
                String path = Environment.getExternalStorageDirectory()
                        + File.separator + getString(R.string.app_name)+ File.separator +"image";
                File myFile = new File(path);
                if (!myFile.exists()) {
                    myFile.mkdirs();
                }
                File aacFile = new File(myFile, "tmp.aac");
                aacFile.createNewFile();
                fileOutputStream = new FileOutputStream(aacFile);
            } catch (FileNotFoundException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

            while (enableAudio) {
                try {
                    byte[] bytes = new byte[1024];
                    int len = audioInputStream.read(bytes);
                    //Log.d("audio", "read len = " +len);
                    if (len>0) {
                        fileOutputStream.write(bytes,0,len);
                    }
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
            try {
                mediaStreamer.closeAudioStream();
                audioInputStream.close();
                fileOutputStream.flush();
                fileOutputStream.close();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    };
    */
    private Runnable palyAudio = new Runnable() {

        @Override
        public void run() {
            // TODO Auto-generated method stub
            multiPlayer = new MultiPlayer(null, 300, 150);
            try {
                mediaStreamer.createAudioStream();
                audioInputStream = new PipedInputStream(mediaStreamer.getAudioStream());
                multiPlayer.play(audioInputStream);
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    };
    private AACRecord aacRecord;
    private OnIntercomListener mOnIntercomListener = new OnIntercomListener() {

        @Override
        public void onIntercom() {
            // TODO Auto-generated method stub
            if (aacRecord == null) {
                //aacRecord = new AACRecord(mediaStreamer);
                if (mediaStreamer_51see != null)
                    aacRecord = new AACRecord(mediaStreamer_51see, PlayerActivity.this.getApplicationContext());
            }
            aacRecord.start();
            mHandler.sendEmptyMessage(MSG_START_INTERCOMM);
        }

        @Override
        public void onUnsupported(String error) {
            // TODO Auto-generated method stub
            Message msg = new Message();
            msg.what = MSG_INTERCOMM_REQ_FAIL;
            msg.obj = error;
            mHandler.sendMessage(msg);
        }

    };
    private OnAlarmEnableListener mOnAlarmEnableListener = new OnAlarmEnableListener() {
        @Override
        public void onAction() {
            // TODO Auto-generated method stub
            mHandler.sendEmptyMessage(MSG_ALARM_STATE_CHANGED);
        }
    };
    private OnAVQSetListener mOnAVQSetListener = new OnAVQSetListener() {
        @Override
        public void onAction() {
            // TODO Auto-generated method stub
            mHandler.sendEmptyMessage(MSG_AVQ_CHANGED);
        }
    };

    //private Thread startConnectThread;
    private Runnable mPollTask = new Runnable() {
        public void run() {
            double amp = 0;
            if (aacRecord != null) {
                amp = aacRecord.getAmplitude();
                updateDisplay(amp);
                //Log.d(TAG, "volume value" + amp);
            }

            mHandler.postDelayed(mPollTask, POLL_INTERVAL);
        }
    };

    private void initAlertDialogs() {
        timeoutAlertDialog = new AlertDialog.Builder(PlayerActivity.this)
                .setTitle(R.string.sure)
                .setMessage(R.string.timeout)
                .setPositiveButton(R.string.yes,
                        new DialogInterface.OnClickListener() {

                            @Override
                            public void onClick(DialogInterface dialog,
                                                int which) {
                                // TODO Auto-generated method stub
                                dialog.dismiss();
                                recState = RecState.STOP;
                                if (mediaStreamer != null) {
                                    mediaStreamer.close();
                                }
                                stopThread();
                                PlayerActivity.this.finish();
                            }
                        }).create();

        lostConnectionAlertDialog = new AlertDialog.Builder(PlayerActivity.this)
                .setTitle(R.string.lostConnectionTitle)
                .setMessage(R.string.lostConnectionMessage)
                .setPositiveButton(R.string.yes,
                        new DialogInterface.OnClickListener() {

                            @Override
                            public void onClick(DialogInterface dialog,
                                                int which) {
                                // TODO Auto-generated method stub
                                dialog.dismiss();
                                recState = RecState.STOP;
                                if (mediaStreamer != null) {
                                    mediaStreamer.close();
                                }
                                stopThread();
                                PlayerActivity.this.finish();
                            }
                        }).create();

        nonetworkAlertDialog = new AlertDialog.Builder(PlayerActivity.this)
                .setTitle(R.string.sure)
                .setMessage(R.string.nonetwork)
                .setPositiveButton(R.string.yes,
                        new DialogInterface.OnClickListener() {

                            @Override
                            public void onClick(DialogInterface dialog,
                                                int which) {
                                // TODO Auto-generated method stub
                                dialog.dismiss();
                                recState = RecState.STOP;
                                if (mediaStreamer != null) {
                                    mediaStreamer.close();
                                }
                                stopThread();
                                PlayerActivity.this.finish();
                            }
                        }).create();

        invalidIPAlertDialog = new AlertDialog.Builder(PlayerActivity.this)
                .setTitle(R.string.sure)
                .setMessage(R.string.invalidIPAddress)
                .setPositiveButton(R.string.yes,
                        new DialogInterface.OnClickListener() {

                            @Override
                            public void onClick(DialogInterface dialog,
                                                int which) {
                                // TODO Auto-generated method stub
                                dialog.dismiss();
                                recState = RecState.STOP;
                                if (mediaStreamer != null) {
                                    mediaStreamer.close();
                                }
                                stopThread();
                                PlayerActivity.this.finish();
                            }
                        }).create();

        initFailedAlertDialog = new AlertDialog.Builder(PlayerActivity.this)
                .setTitle(R.string.sure)
                .setMessage(R.string.systemError)
                .setPositiveButton(R.string.sure,
                        new DialogInterface.OnClickListener() {

                            @Override
                            public void onClick(DialogInterface dialog,
                                                int which) {
                                // TODO Auto-generated method stub
                                dialog.dismiss();
                                recState = RecState.STOP;
                                if (mediaStreamer != null) {
                                    mediaStreamer.close();
                                }
                                stopThread();
                                PlayerActivity.this.finish();
                            }
                        }).create();
    }

    private void dismissAlertDialogs() {
        timeoutAlertDialog.dismiss();
        lostConnectionAlertDialog.dismiss();
        nonetworkAlertDialog.dismiss();
        invalidIPAlertDialog.dismiss();
        initFailedAlertDialog.dismiss();
    }

    @SuppressWarnings("deprecation")
    private void handleMessage(Message msg) {
        switch (msg.what) {
            case MSG_TIME_OUT:
                //if (mediaStreamer != null) {
                //	mediaStreamer.close();
                //}
                //stopThread();
                //timeoutAlertDialog.show();
                break;

            case MSG_DISCONNECT:
                if (connect_status_51see <= 2) {
                    recState = RecState.STOP;
                    if (mediaStreamer != null) {
                        mediaStreamer.close();
                    }
                    connect_status_51see = 0;
                    //Log.d(TAG, "MSG_DISCONNECT  stopThread");
                    stopThread();
                    new ConnectThread("51see").start();
                }
                break;

            case MSG_STOP_RECORD:
                Drawable img = getResources().getDrawable(R.drawable.record);
                btnRecord.setCompoundDrawablesWithIntrinsicBounds(null, img, null, null);
                break;

            case MSG_GET_IFRAME:///local or 51see connected
                if (!isLocal) {
                    if (connect_status_51see == 0) {

                        if (connect_status_tutk == 0)//if tutk connected
                        {
                            mediaStreamer = mediaStreamer_51see;
                            connect_status_51see = 2;
                        } else {
                            mediaStreamer_51see.setVideo(false);
                            connect_status_51see = 3;
                            break;
                        }

                    } else {
                        if (connect_status_tutk == 1)//if tutk connected
                        {
                            if (mediaStreamer_51see != null) {
                                mediaStreamer_51see.setVideo(false);
                                connect_status_51see = 3;
                            }
                            break;
                        }
                    }
                } else {
                    connect_status_51see = 1;
                }
                frames = frames_51see;

                if (drawSurfaceThread != null)//if 51see has connected, stop the video
                {
                    break;
                }

                drawSurfaceThread = new Thread(
                        drawSurfaceRunnable);
                drawSurfaceThread.start();
                viewFlipper.setDisplayedChild(1);
                connected = true;
                setButtons(connected);
                if (isRecording) {
                    btnRecord.performClick();
                }

                break;
            case MSG_GET_IFRAME_TUTK:///tutk connected

                mediaStreamer = mediaStreamer_tutk;
                frames = frames_tutk;
                if (drawSurfaceThread != null)//if 51see has connected, stop the video
                {
                    if (connect_status_51see == 2) {
                        if (mediaStreamer_51see != null)
                            mediaStreamer_51see.setVideo(false);
                        connect_status_51see = 3;
                    }
                    connect_status_tutk = 1;
                    break;
                }
                drawSurfaceThread = new Thread(
                        drawSurfaceRunnable);
                drawSurfaceThread.start();
                viewFlipper.setDisplayedChild(1);
                connected = true;
                setButtons(connected);
                if (isRecording) {
                    btnRecord.performClick();
                }
                connect_status_tutk = 1;
                break;
            case MSG_SNAP_OK:
                Toast toast = Toast.makeText(
                        getApplicationContext(),
                        "Save picture OK!", Toast.LENGTH_SHORT);
                toast.setGravity(Gravity.CENTER, 0, 0);
                toast.show();
                break;

            case MSG_NONE_NETWORK:
                //stopThread();
                nonetworkAlertDialog.show();
                break;

            case MSG_INVALID_IP:
                invalidIPAlertDialog.show();//无效的IP地址
                break;
            case MSG_TUTK_FAIL:
//			Log.i(TAG, "tutk failed");
                connect_status_tutk = 0;
                if (connect_status_51see == 3) {
                    connect_status_51see = 0;
                    if (mediaStreamer_51see != null)
                        mediaStreamer_51see.close();
                    new ConnectThread("51see").start();
                    mediaStreamer_tutk.close();
                    mediaStreamer_tutk = null;
                } else {
                    //do nothing
                }
                break;

            case MSG_INIT_FAIL:
//			Log.i(TAG, "51see failed");
                mediaStreamer_51see.close();
                new ConnectThread("51see").start();
//			initFailedAlertDialog.show();
                break;

            case MSG_ALARM_STATE_CHANGED:
                RefreshAlarmEnableState();
                break;
            case MSG_AVQ_CHANGED:
                RefreshAVQState();
                break;
            case MSG_START_INTERCOMM:
                if (enableIntercom) {
                    final Drawable ondrawableTop = getResources().getDrawable(R.drawable.mic_on);
                    btnIntercom.setCompoundDrawablesWithIntrinsicBounds(null, ondrawableTop, null, null);
                }
                break;

            case MSG_INTERCOMM_REQ_FAIL:
                String ret = (String) msg.obj;
                final Drawable offdrawableTop = getResources().getDrawable(R.drawable.mic_off);
                btnIntercom.setCompoundDrawablesWithIntrinsicBounds(null, offdrawableTop, null, null);
                if (ret == null) {
                    break;
                } else if (ret.equals("audioBusy")) {
                    //Log.e(TAG, "Intercomm audioBusy");
                } else if (ret.equals("audioOff")) {
                    //Log.e(TAG, "Intercomm audioOff");
                } else if (ret.equals("audioDisconnect")) {
                    //Log.e(TAG, "Intercomm audioDisconnect");
                }
            default:
                break;
        }
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);
        gestureDetector = new GestureDetector(getApplicationContext(), this);
        videoDecoder = VideoDecoderFactory.createDecoder();
        videoDecoder.initGlobal();
        nDecodeHander = videoDecoder.initDecoder("H264");
        appData = (AppData) this.getApplication();

        scrennFlag = Settings.System.getInt(getContentResolver(), Settings.System.ACCELEROMETER_ROTATION, 0);
        Settings.System.putInt(getContentResolver(), Settings.System.ACCELEROMETER_ROTATION, 1);
        //appData.addUIActivity(new WeakReference<Activity>(this));

        audioManager = (AudioManager) PlayerActivity.this.getSystemService(Context.AUDIO_SERVICE);
        maxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
        curVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
    }

    @Override
    public void onDestroy() {
        videoDecoder.uninitDecoder(nDecodeHander);
        videoDecoder.uninitGlobal();
        nDecodeHander = -1;
        if (drawSurfaceRunnable != null) {
            drawSurfaceRunnable = null;
        }

        if (glSurfaceView != null) {
            glSurfaceView = null;
        }

        if (getIFrameRunnable != null) {
            getIFrameRunnable = null;
        }

        if (getIFrameRunnable_tutk != null) {
            getIFrameRunnable_tutk = null;
        }

        if (recorder != null) {
            recorder = null;
        }
        super.onDestroy();
        //Log.d("PlayerActivity","onDestroy");
    }

    @Override
    public void onStart() {
        super.onStart();
        Configuration cf = this.getResources().getConfiguration();
        onConfigurationChanged(cf);
    }

    @Override
    public void onConfigurationChanged(Configuration newConfig) {

        super.onConfigurationChanged(newConfig);


        if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
            getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        } else {
            getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
        }

        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        setContentView(R.layout.player_view);

        if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
            topLayout = (RelativeLayout) findViewById(R.id.player_topLayout);
            topLayout.setVisibility(View.GONE);
        } else {
            String title = getIntent().getExtras().getString("title");
            titleName = (TextView) findViewById(R.id.titleName);
            titleName.setText(title);
            topLayout = (RelativeLayout) findViewById(R.id.player_topLayout);
            topLayout.setVisibility(View.VISIBLE);
        }

        LayoutInflater inflater = LayoutInflater.from(getApplicationContext());
        progressBarView = (RelativeLayout) inflater.inflate(R.layout.progressbar, null);
        viewFlipper = (ViewFlipper) findViewById(R.id.viewFlipperPlay);

        DisplayMetrics dm = new DisplayMetrics();
        PlayerActivity.this.getWindowManager().getDefaultDisplay().getMetrics(dm);
        int w = dm.widthPixels;
        int h = dm.heightPixels;

        if (!(newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE && (nVideoWidth == 1280 && nVideoHeight == 720))) {
//    		if (h/w > 480/640) {
//				h = w*480/640;
//			}else {
//				w = h*640/480;
//			}
            h = h / 2;

        }
        if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
            h = dm.heightPixels;
            w = dm.widthPixels;
        }

        LayoutParams laParams = (LayoutParams) viewFlipper.getLayoutParams();
        laParams.width = w;
        laParams.height = h;
        viewFlipper.setLayoutParams(laParams);
        glSurfaceView = new MyVideoSurface(this);
        glSurfaceView.resetRatio(w, h);
        viewFlipper.addView(progressBarView, 0);
        viewFlipper.addView(glSurfaceView, 1);
        //viewFlipper.addView(myVideoSurface, 1);
        if (connected) {
            viewFlipper.setDisplayedChild(1);
        }
        //myVideoSurface.setConfigureChanged(true);
        if (newConfig.orientation == Configuration.ORIENTATION_LANDSCAPE) {
            landScapeControlBar = findViewById(R.id.lanscapeControlBar);
            landScapeControlBar.setVisibility(View.GONE);

        } else {
            btnPause = (ImageButton) findViewById(R.id.imageButtonPause);
            btnPause.setOnClickListener(this);
        }

        btnZoomIn = (Button) findViewById(R.id.imageButtonZoomIn);
        btnZoomOut = (Button) findViewById(R.id.imageButtonZoomOut);
        btnAlarm = (Button) findViewById(R.id.imageButtonAlarm);
        btnDefinition = (Button) findViewById(R.id.imageButtonDefinition);
        btnAutoScanV = (ImageButton) findViewById(R.id.imageButtonPtzV);
        btnAutoScanH = (ImageButton) findViewById(R.id.imageButtonPtzH);
        btnAutoScanStop = (ImageButton) findViewById(R.id.imageButtonStop);
        btnAutoScanReset = (ImageButton) findViewById(R.id.imageButtonPtzReset);

        btnFlipH = (Button) findViewById(R.id.imageButtonFlipH);
        btnFlipV = (Button) findViewById(R.id.imageButtonFlipV);
        btnIntercom = (Button) findViewById(R.id.imageButtonInterCom);
        commentEt = (DelEditText) findViewById(R.id.commentEt);
        publishBtn = (Button) findViewById(R.id.publishBtn);
        commentListView = (DeviceListView) findViewById(R.id.commentListView);

        btnAudio = (Button) findViewById(R.id.imageButtonAudio);
        btnSnapshoot = (Button) findViewById(R.id.imageButtonSnap);
        btnRecord = (Button) findViewById(R.id.imageButtonRecord);
        menuBtn = (Button) findViewById(R.id.menuBtn);
        backLayout = (LinearLayout) findViewById(R.id.back_layout);

        del_re = (LinearLayout) findViewById(R.id.del_re);
        rcChat_popup = this.findViewById(R.id.rcChat_popup);
        voice_rcd_hint_rcding = (LinearLayout) this.findViewById(R.id.voice_rcd_hint_rcding);
        voice_rcd_hint_loading = (LinearLayout) this.findViewById(R.id.voice_rcd_hint_loading);
        voice_rcd_hint_tooshort = (LinearLayout) this.findViewById(R.id.voice_rcd_hint_tooshort);
        sc_img1 = (ImageView) this.findViewById(R.id.sc_img1);
        volume = (ImageView) this.findViewById(R.id.volume);
        screenBean = LocUtil.getScreenPix(this);


        btnIntercom.setOnTouchListener(new OnTouchListener() {

            @Override
            public boolean onTouch(View arg0, MotionEvent event) {
                // TODO Auto-generated method stub
                switch (event.getAction()) {
                    case MotionEvent.ACTION_DOWN:
                        Log.d(TAG, "--ACTION_DOWN");
                        break;
                    case MotionEvent.ACTION_UP:
                        Log.d(TAG, "--ACTION_UP");
                        break;

                    default:
                        break;
                }
                return false;
            }
        });
        btnZoomIn.setOnClickListener(this);
        btnZoomOut.setOnClickListener(this);
        btnAlarm.setOnClickListener(this);
        btnDefinition.setOnClickListener(this);
        btnAutoScanV.setOnClickListener(this);
        btnAutoScanH.setOnClickListener(this);
        btnAutoScanStop.setOnClickListener(this);
        btnAutoScanReset.setOnClickListener(this);
        btnFlipH.setOnClickListener(this);
        btnFlipV.setOnClickListener(this);
        //btnIntercom.setOnClickListener(this);
        btnIntercom.setOnTouchListener(this);

        btnAudio.setOnClickListener(this);
        btnSnapshoot.setOnClickListener(this);
        btnRecord.setOnClickListener(this);

        backLayout.setOnClickListener(this);
        menuBtn.setOnClickListener(this);
//        publishBtn.setOnClickListener(this);//发表评论按钮，横屏时引起空指针
//        commentListView.setonRefreshListener(this);//横屏时引起空指针
//        new Thread(httpGetThread).start();//横屏时引起空指针

        setButtons(connected);

        if (isRecording) {
            Drawable img = getResources().getDrawable(R.drawable.record_pressed);
            btnRecord.setCompoundDrawablesWithIntrinsicBounds(null, img, null, null);
        } else {
            Drawable img = getResources().getDrawable(R.drawable.record);
            btnRecord.setCompoundDrawablesWithIntrinsicBounds(null, img, null, null);
        }

        //   btnAudio.setImageDrawable(getResources().getDrawable(enableAudio?R.drawable.player_audio_on:R.drawable.player_audio_off ));
        Drawable img = getResources().getDrawable(enableAudio ? R.drawable.player_intercom_on : R.drawable.player_intercom_off);
        btnAudio.setCompoundDrawablesWithIntrinsicBounds(null, img, null, null);
        if (mediaStreamer != null) {
            RefreshAVQState();
        }

    }

    private void setButtons(boolean isConnected) {
        if (btnPause != null) {
            btnPause.setEnabled(isConnected);
        }
        btnZoomIn.setEnabled(isConnected);
        btnZoomOut.setEnabled(isConnected);
        btnAlarm.setEnabled(isConnected);
        btnDefinition.setEnabled(isConnected);
        btnAutoScanV.setEnabled(isConnected);
        btnAutoScanH.setEnabled(isConnected);
        btnAutoScanStop.setEnabled(isConnected);
        btnAutoScanReset.setEnabled(isConnected);
        btnFlipH.setEnabled(isConnected);
        btnFlipV.setEnabled(isConnected);
        btnIntercom.setEnabled(isConnected);
        btnAudio.setEnabled(isConnected);
        btnSnapshoot.setEnabled(isConnected);
        btnRecord.setEnabled(isConnected);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {

            case android.R.id.home:
                finish();
                break;
            default:
                break;
        }

        if (item.getTitle().equals("info")) {
            Intent intent = new Intent(this, DeviceInfoActivity.class);
            intent.putExtra("id", deviceID);
            intent.putExtra("version", deviceversion);
            intent.putExtra("name", devicename);
            intent.putExtra("isLocal", isLocal);
            startActivity(intent);
            overridePendingTransition(R.anim.slide_out_left, R.anim.slide_in_right);
        }

        return super.onOptionsItemSelected(item);
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {//拦截音量键

        audioManager = (AudioManager) PlayerActivity.this.getSystemService(Context.AUDIO_SERVICE);
        int maxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
        System.out.println("---------" + maxVolume);
        int curVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
        audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, maxVolume, 0);
        switch (keyCode) {
            case KeyEvent.KEYCODE_VOLUME_DOWN:

                Log.i(TAG, "---------KEYCODE_VOLUME_DOWN");
                curVolume = curVolume - 3;
                if (curVolume < 3) {
                    curVolume = 0;
                }
                Log.i(TAG, "---------->>>" + curVolume);
                audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, curVolume, 0);
                Log.i(TAG, "------------cur:" + audioManager.getStreamVolume(AudioManager.STREAM_MUSIC));
                break;
            case KeyEvent.KEYCODE_VOLUME_UP:
                Log.i(TAG, "---------KEYCODE_VOLUME_UP");
                curVolume = curVolume + 3;
                if (curVolume >= maxVolume) {
                    curVolume = maxVolume;
                }
//			audioManager.setStreamVolume(AudioManager.STREAM_MUSIC,curVolume , 0);
                Log.i(TAG, "---------->>>" + curVolume);
                audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, curVolume, 0);
                Log.i(TAG, "------------cur:" + audioManager.getStreamVolume(AudioManager.STREAM_MUSIC));
                break;

            default:
                break;
        }


        return super.onKeyDown(keyCode, event);
    }

    @Override
    public void onPause() {
        Log.i(TAG, "----------------onPause--------------------");
        super.onPause();
        Settings.System.putInt(getContentResolver(), Settings.System.ACCELEROMETER_ROTATION, scrennFlag);
        if (glSurfaceView != null) {
            glSurfaceView.onPause();
        }
        isRecording = false;
        dismissAlertDialogs();
        //Log.d("PlayerActivity", "onPause()");

//		if(!forceExitThread){
//			stopThread();
//		}
//		if(mediaStreamer != null)
//			mediaStreamer.close();
    }

    @Override
    public void onResume() {
        super.onResume();

        Settings.System.putInt(getContentResolver(), Settings.System.ACCELEROMETER_ROTATION, 1);
        if (glSurfaceView != null) {
            glSurfaceView.onResume();
        }
        initAlertDialogs();
        Log.d(TAG, "onResume()");
        //videoRender.setReinit();
        Bundle bundle = getIntent().getExtras();
        isLocal = bundle.getBoolean("isLocal");
        if (isLocal) {
            new ConnectThread("local").start();//
            Log.i(TAG, "Local ConnectThread running");
        } else {
            new ConnectThread("51see").start();//just for tcp, not connect to tutk
            new ConnectThread("tutk").start();
            Log.i(TAG, "ConnectThread running");
        }

        audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, maxVolume, 0);
    }

    private void stopThread() {
        forceExitThread = true;
        if (aacRecord != null) {
            aacRecord.stop();
            aacRecord = null;
        }
        if (recState != RecState.STOP) {
            recState = RecState.STOP;
        }
        try {
            if (getIFrameThread != null) {
                getIFrameThread.interrupt();
                ////Log.d("PlayerActivity", "getIFrameThread.join()");
                //getIFrameThread.join();
            }
            if (drawSurfaceThread != null) {
                drawSurfaceThread.interrupt();
                ////Log.d("PlayerActivity", "drawSurfaceThread.join()");
                drawSurfaceThread.join();
            }
            getIFrameThread = null;
            drawSurfaceThread = null;
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        connected = false;
    }

    //通知gallery刷新
    public void fileScan(File file) {
        try {
            mHandler.sendEmptyMessage(MSG_STOP_RECORD);
            Uri data = Uri.parse("file://" + file.getAbsolutePath());
            sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, data));
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    @Override
    public void OnMediaDataException(MediaEvent event) {
        // 停止播放线程
        Message msg = new Message();
        switch (event) {
            case CONN_TIME_OUT:

                msg.what = MSG_TIME_OUT;

                break;

            case CONN_DISCONNECT:
                msg.what = MSG_DISCONNECT;
                break;
        }
        this.mHandler.sendMessage(msg);
    }

    private void startAudio() {
        audioThread = new Thread(palyAudio);
        audioThread.start();
    }

    private void stopAudio() {
        if (audioThread != null) {
            audioThread.interrupt();
        }

        mediaStreamer.closeAudioStream();
        try {
            audioInputStream.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        if (multiPlayer != null) {
            multiPlayer.stop();
            multiPlayer = null;
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // TODO Auto-generated method stub
        menu.add("info").setIcon(R.drawable.caminfo)
                .setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
        return super.onCreateOptionsMenu(menu);
    }

    private File openSnapFile(String szPath, String szFileName) {

        File retFile = null;
        String sDStateString = Environment.getExternalStorageState();
        if (sDStateString.equals(Environment.MEDIA_MOUNTED)) {
            try {
                // 获取扩展存储设备的文件目录
                File SDFile = Environment.getExternalStorageDirectory();
                szPath = SDFile.getAbsolutePath()
                        + File.separator + getString(R.string.app_name) + File.separator + szPath;
                File myFile = new File(szPath);

                // 判断是否存在,不存在则创建
                if (!myFile.exists()) {
                    myFile.mkdirs();
                }

                retFile = new File(myFile, szFileName);
                retFile.createNewFile();
                snap = true;
            } catch (FileNotFoundException e) {
                //Log.d("Player", "FileNotFoundException!");
                e.printStackTrace();
            } catch (Exception e) {
                // TODO: handle exception
                //Log.d("Player", "snapshoot exception!");
                e.printStackTrace();
            }// end of try
        }
        return retFile;
    }

    private void RefreshAlarmEnableState() {
        if (mediaStreamer == null)
            return;
        if (this.mediaStreamer.m_bAlarmEnable == 0) {
            Drawable img = getResources().getDrawable(R.drawable.alarm_off);
            btnAlarm.setCompoundDrawablesWithIntrinsicBounds(null, img, null, null);
        } else {
            Drawable img = getResources().getDrawable(R.drawable.alarm_on);
            btnAlarm.setCompoundDrawablesWithIntrinsicBounds(null, img, null, null);
        }
    }

    private void RefreshAVQState() {
        if (mediaStreamer == null)
            return;

        if (this.mediaStreamer.m_nDefinitionCurrent == 1) //1 3 5 max mid min
        {
            Drawable img = getResources().getDrawable(R.drawable.avq_high);
            btnDefinition.setCompoundDrawablesWithIntrinsicBounds(null, img, null, null);
        } else if (this.mediaStreamer.m_nDefinitionCurrent == 3) {
            Drawable img = getResources().getDrawable(R.drawable.avq_mid);
            btnDefinition.setCompoundDrawablesWithIntrinsicBounds(null, img, null, null);
        } else if (this.mediaStreamer.m_nDefinitionCurrent == 5) {
            Drawable img = getResources().getDrawable(R.drawable.avq_min);
            btnDefinition.setCompoundDrawablesWithIntrinsicBounds(null, img, null, null);
        }
    }

    public void onSetAudio(boolean bAudio) {
        //Log.d("audio", "enableAudio = "+bAudio);
        this.mediaStreamer.setAudio(bAudio);
        if (bAudio) {
            startAudio();
            //Log.d("audio", "startAudio ");
            Drawable img = getResources().getDrawable(R.drawable.player_intercom_on);
            btnAudio.setCompoundDrawablesWithIntrinsicBounds(null, img, null, null);
//			btnAudio.setImageDrawable(getResources().getDrawable(R.drawable.player_audio_on));
        } else {
            stopAudio();
            //Log.d("audio", "stopAudio ");
            Drawable img = getResources().getDrawable(R.drawable.player_intercom_off);
            btnAudio.setCompoundDrawablesWithIntrinsicBounds(null, img, null, null);
//			btnAudio.setImageDrawable(getResources().getDrawable(R.drawable.player_audio_off));
        }
    }

    @Override
    public void onClick(View v) {

        switch (v.getId()) {
            case R.id.imageButtonZoomIn:
                this.mediaStreamer.zoomIn();
                break;

            case R.id.imageButtonZoomOut:
                this.mediaStreamer.zoomOut();
                break;

            case R.id.imageButtonPtzV:
                this.mediaStreamer.scanV();
                break;

            case R.id.imageButtonPtzH:
                this.mediaStreamer.scanH();
                break;

            case R.id.imageButtonStop:
                this.mediaStreamer.scanStop();
                break;

            case R.id.imageButtonPtzReset:
                this.mediaStreamer.restPtz();
                break;

            case R.id.imageButtonFlipH:
                //Log.d("imageButtonFlipH", "imageButtonFlipH");
                this.mediaStreamer.flipH();
                break;
            case R.id.imageButtonFlipV:
                this.mediaStreamer.flipV();
                break;
            case R.id.imageButtonAlarm:
                if (this.mediaStreamer.m_bAlarmEnable == 0) {
                    this.mediaStreamer.m_bAlarmEnable = 1;
                } else {
                    this.mediaStreamer.m_bAlarmEnable = 0;
                }

                this.mediaStreamer.setAlarmEnable();

                RefreshAlarmEnableState();

                //Log.d("setAlarmEnable", "m_bAlarmEnable = "+this.mediaStreamer.m_bAlarmEnable);

                break;

            case R.id.imageButtonDefinition:
                if (this.mediaStreamer.m_nDefinitionCurrent == 3) {

                    this.mediaStreamer.m_nDefinitionCurrent = 1;//高
                } else if (this.mediaStreamer.m_nDefinitionCurrent == 5) {
                    this.mediaStreamer.m_nDefinitionCurrent = 3;
                } else if (this.mediaStreamer.m_nDefinitionCurrent == 1) {
                    this.mediaStreamer.m_nDefinitionCurrent = 5;//低
                }

                this.mediaStreamer.setDefinition();
                RefreshAVQState();//UI
                break;

//		case R.id.imageButtonInterCom:
//		{
//			long time = System.currentTimeMillis();
//			long timeD= time - lastClickTime;
//
//			if(0<timeD && timeD < 3000)
//			{
//				System.out.println("could reponse onclick!!!!!");
//				break;
//			}
//
//			lastClickTime = time;
//
//			enableIntercom = !enableIntercom;
//			if (enableIntercom) {
//				//Log.d("Intercom", "wait 1");
//				final Drawable drawableTop = getResources().getDrawable(R.drawable.mic_waiting);
//				btnIntercom.setCompoundDrawablesWithIntrinsicBounds(null, drawableTop, null, null);
//				this.mediaStreamer.setOnIntercomListener(mOnIntercomListener);
////				if (aacRecord==null) {
////					aacRecord = new AACRecord(mediaStreamer);
////				}
////				aacRecord.start();
////				mHandler.sendEmptyMessage(MSG_START_INTERCOMM);
//
//				this.mediaStreamer.setInterCom(enableIntercom);
//
//				if(enableAudio)
//				{
//				   enableAudio = !enableAudio;
//				   onSetAudio(enableAudio);
//				}
//
//			}else {
//				//Log.d("Intercom", "off 2");
//				final Drawable drawableTop = getResources().getDrawable(R.drawable.mic_off);
//				btnIntercom.setCompoundDrawablesWithIntrinsicBounds(null, drawableTop, null, null);
//				this.mediaStreamer.setOnIntercomListener(null);
//				if (aacRecord!=null) {
//					aacRecord.stop();
//					aacRecord = null;
//				}
////				Drawable img = getResources().getDrawable(R.drawable.player_intercom_off);
////				btnInterCom.setCompoundDrawablesWithIntrinsicBounds(null, img, null, null);
//				if(!enableAudio)
//				{
//					enableAudio = !enableAudio;
//					onSetAudio(enableAudio);
//				}
//			}
//		}
//			break;
            case R.id.imageButtonAudio:
                enableAudio = !enableAudio;
                onSetAudio(enableAudio);
            /*
			//Log.d("audio", "enableAudio = "+enableAudio);
			this.mediaStreamer.setAudio(enableAudio);
			if (enableAudio) {
				startAudio();
				//Log.d("audio", "startAudio ");
				Drawable img = getResources().getDrawable(R.drawable.player_audio_on);
				btnAudio.setCompoundDrawablesWithIntrinsicBounds(null, img, null, null);
//				btnAudio.setImageDrawable(getResources().getDrawable(R.drawable.player_audio_on));
			}else {
				stopAudio();
				//Log.d("audio", "stopAudio ");
				Drawable img = getResources().getDrawable(R.drawable.player_audio_off);
				btnAudio.setCompoundDrawablesWithIntrinsicBounds(null, img, null, null);
//				btnAudio.setImageDrawable(getResources().getDrawable(R.drawable.player_audio_off));
			}
			*/
                break;

            case R.id.imageButtonSnap: {
                if (!drawSurfaceThread.isAlive())
                    break;
                String sDStateString = Environment.getExternalStorageState();
                if (sDStateString.equals(Environment.MEDIA_MOUNTED)) {
                    try {
                        // 获取扩展存储设备的文件目录
                        File SDFile = Environment.getExternalStorageDirectory();
                        String imagePath = SDFile.getAbsolutePath()
                                + File.separator + getString(R.string.app_name) + File.separator + "image";
                        Time mTime = new Time(); // or Time t=new Time("GMT+8");
                        // 加上Time Zone资料。
                        mTime.setToNow(); // 取得系统时间。
                        String filename = mTime.format2445() + ".jpg";
                        File myFile = new File(imagePath);

                        // 判断是否存在,不存在则创建
                        if (!myFile.exists()) {
                            myFile.mkdirs();
                        }

                        imageFile = new File(myFile, filename);
                        imageFile.createNewFile();
                        snap = true;
                    } catch (FileNotFoundException e) {
                        //Log.d("Player", "FileNotFoundException!");
                        e.printStackTrace();
                    } catch (Exception e) {
                        // TODO: handle exception
                        //Log.d("Player", "snapshoot exception!");
                        e.printStackTrace();
                    }// end of try
                }
                break;
            }

            case R.id.imageButtonRecord:

                if (recState != RecState.STOP) {
                    recState = RecState.STOP;
                    isRecording = false;
                    break;
                }
                String sdState = Environment.getExternalStorageState();
                if (sdState.equals(Environment.MEDIA_MOUNTED)) {
                    File SDFile = Environment.getExternalStorageDirectory();
                    String videoPath = SDFile.getAbsolutePath() + File.separator + getString(R.string.app_name) + File.separator
                            + "video";
                    Time mTime = new Time(); // or Time t=new Time("GMT+8"); 加上Time
                    // Zone资料。
                    mTime.setToNow(); // 取得系统时间。
                    String filename = mTime.format2445() + ".mp4";
                    File myFile = new File(videoPath);
                    if (!myFile.exists()) {
                        myFile.mkdirs();
                    }
                    videoFile = new File(myFile, filename);
                    try {
                        videoFile.createNewFile();

                        if (recorder != null) {
                            recorder = null;
                        }

                        recorder = new H264toMP4(videoFile.getAbsolutePath(), videoDecoder);

                        recorder.setFps(fps);
                        // recording = RecordingState.START;
                        if (recorder.startRecording() == 0) {
                            recState = RecState.START;
                            isRecording = true;
                            Drawable imgpressed = getResources().getDrawable(R.drawable.video_record_high_light);
                            btnRecord.setCompoundDrawablesWithIntrinsicBounds(null, imgpressed, null, null);
                            //Log.d("Player", "start record... ");
                        } else {
                            //Log.d("Player", "start record failed! ");
                            recorder = null;// 初始化mp4编码失败
                        }


                    } catch (IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }

                }
                break;

            case R.id.imageButtonPause:
                if (recState == RecState.START) {
                    recState = RecState.PAUSE;
                } else if (recState == RecState.PAUSE) {
                    recState = RecState.START;
                }
                break;

            case R.id.back_layout:
                this.finish();
                break;
            case R.id.menuBtn:

                Intent intent = new Intent(PlayerActivity.this, DeviceInfoActivity.class);
                intent.putExtra("id", deviceID);
                intent.putExtra("name", devicename);
                intent.putExtra("isLocal", isLocal);
                intent.putExtra("version", deviceversion);
                startActivity(intent);
                break;
            case R.id.publishBtn:
                new Thread(httpPostThread).start();
                break;
            default:
                break;
        }
    }

    @Override
    public boolean onDown(MotionEvent arg0) {
        // TODO Auto-generated method stub
        return false;
    }

    @Override
    public boolean onFling(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
        //mediaStreamer.scanStop();
        // TODO Auto-generated method stub
        float moldX = e1.getX();
        float deltaY = e1.getY() - e2.getY();
        float deltaX = e1.getX() - e2.getX();
        if (moldX < screenBean.getsWidth() / 5.0) {// 在屏幕的1/5处上下滑动
            System.out.println("1/5处滑动");
            if (Math.abs(deltaY) > Math.abs(deltaX)) {
                if (e1.getY() - e2.getY() < -50) {//手势向下,聚焦远
                    mediaStreamer.focusOut();
                    System.out.println("-------focus out------");
                } else if (e1.getY() - e2.getY() > 50) {//手势向上，聚焦近
                    mediaStreamer.focusIn();
                    System.out.println("-------focus in-------");
                }
            }
        } else {

            if (mediaStreamer == null) {
                return false;
            }
            if (Math.abs(deltaY) > Math.abs(deltaX)) {
                if (e1.getY() - e2.getY() < -50) {//move up
                    //Log.d("PlayActivity", "roll up");
                    mediaStreamer.rollUp();
                } else if (e1.getY() - e2.getY() > 50) {//move down
                    //Log.d("PlayActivity", "roll down");
                    mediaStreamer.rollDown();
                }
            } else {
                if (e1.getX() - e2.getX() > 50) {//move left
                    //Log.d("PlayActivity", "roll right");
                    mediaStreamer.turnRight();
                } else if (e1.getX() - e2.getX() < -50) {//move right ----- left
                    //Log.d("PlayActivity", "roll left");
                    mediaStreamer.turnLeft();
                }
            }
        }

        return true;
    }

    @Override
    public void onLongPress(MotionEvent arg0) {
        // TODO Auto-generated method stub
    }

    @Override
    public boolean onScroll(MotionEvent arg0, MotionEvent arg1, float arg2,
                            float arg3) {
        // TODO Auto-generated method stub
        return false;
    }

    @Override
    public void onShowPress(MotionEvent arg0) {
        // TODO Auto-generated method stub

    }

    @Override
    public boolean onSingleTapUp(MotionEvent e) {
        // TODO Auto-generated method stub
        int[] location = new int[2];
        glSurfaceView.getLocationOnScreen(location);
        if (e.getX() > location[0] && e.getX() < (location[0] + glSurfaceView.getWidth())
                && e.getY() > location[1] && e.getY() < (location[1] + glSurfaceView.getHeight()))

        {
            mediaStreamer.scanStop();
            return true;
        }
        return false;
    }

    private void updateDisplay(double signalEMA) {

        if (volume == null)
            return;

        int nVolume = (int) signalEMA;

        if (nVolume < 200.0) {
            volume.setImageResource(R.drawable.amp1);
        } else if (nVolume >= 200.0 && nVolume < 600) {
            volume.setImageResource(R.drawable.amp2);
        } else if (nVolume >= 600.0 && nVolume < 1200) {
            volume.setImageResource(R.drawable.amp3);
        } else if (nVolume >= 1200.0 && nVolume < 2400) {
            volume.setImageResource(R.drawable.amp4);
        } else if (nVolume >= 2400.0 && nVolume < 10000) {
            volume.setImageResource(R.drawable.amp5);
        } else if (nVolume >= 10000.0 && nVolume < 28000.0) {
            volume.setImageResource(R.drawable.amp6);
        } else if (nVolume >= 28000.0) {
            volume.setImageResource(R.drawable.amp7);
        }
    }

    private void onSetInterComAction(boolean bOn) {
        if (bOn) {
            //this.mediaStreamer.setOnIntercomListener(mOnIntercomListener);
            if (mediaStreamer_51see != null)
                this.mediaStreamer_51see.setOnIntercomListener(mOnIntercomListener);
            //Log.d(TAG, "start intercom");
            enableIntercom = true;
            //this.mediaStreamer.setInterCom(enableIntercom);
            if (mediaStreamer_51see != null)
                this.mediaStreamer_51see.setInterCom(enableIntercom);
            if (enableAudio) {
                enableAudio = !enableAudio;
                onSetAudio(enableAudio);
            }

            mHandler.postDelayed(mPollTask, POLL_INTERVAL);
            Settings.System.putInt(getContentResolver(), Settings.System.ACCELEROMETER_ROTATION, 0);
        } else {
            //Log.d(TAG, "stop intercom");
            enableIntercom = false;

            //this.mediaStreamer.setOnIntercomListener(null);
            if (mediaStreamer_51see != null)
                this.mediaStreamer_51see.setOnIntercomListener(null);
            if (aacRecord != null) {
                aacRecord.stop();
                aacRecord = null;
            }

            if (!enableAudio) {
                enableAudio = !enableAudio;
                onSetAudio(enableAudio);
            }

            mHandler.removeCallbacks(mPollTask);
            Settings.System.putInt(getContentResolver(), Settings.System.ACCELEROMETER_ROTATION, 1);
        }
    }

    @Override
    public boolean onTouch(View arg0, MotionEvent arg1) {
        // TODO Auto-generated method stub
        switch (arg0.getId()) {
            case R.id.imageButtonInterCom: {
                String s = deviceID.substring(0, 1);
                if (s.equals("c")) {
                    AACRecord.RECORDER_SAMPLERATE = 16000;
                } else {
                    AACRecord.RECORDER_SAMPLERATE = 8000;
                }
                onDealIntercomEvent(arg1);
            }
            break;
            default:
                break;
        }
        return false;
    }

    public void onDealIntercomEvent(MotionEvent event) {
        int[] location = new int[2];
        btnIntercom.getLocationInWindow(location);
        int btn_rc_Y = location[1];
        int btn_rc_X = location[0];

        int[] del_location = new int[2];
        del_re.getLocationInWindow(del_location);
        int del_Y = del_location[1];
        int del_x = del_location[0];

        if (event.getAction() == MotionEvent.ACTION_DOWN && flag == 1) {

            long time = System.currentTimeMillis();
            long timeD = time - lastClickTime;

            lastClickTime = time;

            if (timeD <= 3000) {
                return;
            }

            if (event.getRawY() > btn_rc_Y && event.getRawX() > btn_rc_X) {
                final Drawable drawableTop = getResources().getDrawable(R.drawable.mic_waiting);
                btnIntercom.setCompoundDrawablesWithIntrinsicBounds(null, drawableTop, null, null);

                rcChat_popup.setVisibility(View.VISIBLE);
                voice_rcd_hint_loading.setVisibility(View.VISIBLE);
                voice_rcd_hint_rcding.setVisibility(View.GONE);
                voice_rcd_hint_tooshort.setVisibility(View.GONE);
                mHandler.postDelayed(new Runnable() {
                    public void run() {
                        if (!isShosrt) {
                            voice_rcd_hint_loading.setVisibility(View.GONE);
                            voice_rcd_hint_rcding
                                    .setVisibility(View.VISIBLE);
                        }
                    }
                }, 300);
                //img1.setVisibility(View.VISIBLE);
                del_re.setVisibility(View.GONE);
                //here request  intercom
                onSetInterComAction(true);
                flag = 2;
            }
        } else if (event.getAction() == MotionEvent.ACTION_UP && flag == 2) {
            final Drawable drawableTop = getResources().getDrawable(R.drawable.mic_off);
            btnIntercom.setCompoundDrawablesWithIntrinsicBounds(null, drawableTop, null, null);

            if (event.getRawY() >= del_Y
                    && event.getRawY() <= del_Y + del_re.getHeight()
                    && event.getRawX() >= del_x
                    && event.getRawX() <= del_x + del_re.getWidth()) {
                rcChat_popup.setVisibility(View.GONE);
                del_re.setVisibility(View.GONE);
                onSetInterComAction(false);
                flag = 1;

            } else {

                voice_rcd_hint_rcding.setVisibility(View.GONE);
                onSetInterComAction(false);
                flag = 1;
                rcChat_popup.setVisibility(View.GONE);
            }
        }

        if (event.getRawY() < btn_rc_Y) {

            Animation mLitteAnimation = AnimationUtils.loadAnimation(this,
                    R.anim.cancel_rc);
            Animation mBigAnimation = AnimationUtils.loadAnimation(this,
                    R.anim.cancel_rc2);
            //img1.setVisibility(View.GONE);
            del_re.setVisibility(View.VISIBLE);
            del_re.setBackgroundResource(R.drawable.voice_rcd_cancel_bg);
            if (event.getRawY() >= del_Y
                    && event.getRawY() <= del_Y + del_re.getHeight()
                    && event.getRawX() >= del_x
                    && event.getRawX() <= del_x + del_re.getWidth()) {
                del_re.setBackgroundResource(R.drawable.voice_rcd_cancel_bg_focused);
                sc_img1.startAnimation(mLitteAnimation);
                sc_img1.startAnimation(mBigAnimation);
            }
        } else {

            //img1.setVisibility(View.VISIBLE);
            del_re.setVisibility(View.GONE);
            del_re.setBackgroundResource(0);
        }
    }

    @SuppressLint("NewApi")
    @Override
    public boolean onTouchEvent(MotionEvent event) {
        switch (event.getActionMasked()) {
            case MotionEvent.ACTION_POINTER_DOWN: {
                if (event.getPointerCount() == 2) {
                    lastFingerDis = distanceBetweenFingers(event);
                }
            }
            break;

            case MotionEvent.ACTION_POINTER_UP: {
                if (event.getPointerCount() == 2) {
                    double nNewLast = distanceBetweenFingers(event);
                    if (lastFingerDis == 0.0) {
                        break;
                    }

                    if (nNewLast > lastFingerDis) {
                        this.mediaStreamer.zoomIn();
                    } else {
                        this.mediaStreamer.zoomOut();
                    }

                    lastFingerDis = 0.0;
                }
            }
            break;
        }
        return gestureDetector.onTouchEvent(event);
    }

    private double distanceBetweenFingers(MotionEvent event) {
        float disX = Math.abs(event.getX(0) - event.getX(1));
        float disY = Math.abs(event.getY(0) - event.getY(1));
        return Math.sqrt(disX * disX + disY * disY);
    }

    @Override
    public boolean onDoubleTap(MotionEvent e) {
        // TODO Auto-generated method stub
        float scale = glSurfaceView.getZoomedScale();
        //float scale = myVideoSurface.getScale();
        if (scale == 0) {
            return false;
        }

        //判断双击区域是否在图像播放区
        if (e.getX() > glSurfaceView.getLeft() && e.getX() < glSurfaceView.getRight()
                && e.getY() > glSurfaceView.getTop() && e.getY() < glSurfaceView.getBottom()) {
            int x = (int) ((e.getX() - this.glSurfaceView.getLeft()) / scale);
            int y = (int) ((e.getY() - this.glSurfaceView.getTop()) / scale);
            this.mediaStreamer.zoomInPosition(x, y);
            return true;
        }
        return false;
    }

    @Override
    public boolean onDoubleTapEvent(MotionEvent e) {
        // TODO Auto-generated method stub
        return false;
    }

    @Override
    public boolean onSingleTapConfirmed(MotionEvent e) {
        // TODO Auto-generated method stub
        return false;
    }

    /**
     * RGB24转成ARGB再存到Bitmap里面去
     *
     * @param out        解码后的图片数据 RGB24的
     * @param resolution 宽高
     * @return
     */
    public Bitmap RGB24ToARGB(byte[] out, int[] resolution) {
        try {

            int len = out.length;
            //Log.d("RGB24ToARGB", "out.length = " +len +"connected = "+connected);
            int[] buff = new int[len / 3];    //maybe CAUSE out of money
            int j = 0;
            for (int i = 0; i < len; i += 3) {
                byte red = out[i];
                byte green = out[i + 1];
                byte blue = out[i + 2];
                byte alpha = (byte) 0xff;
                buff[j] = ((alpha << 24) & 0xFF000000) | ((red << 16) & 0x00FF0000)
                        | ((green << 8) & 0xFF00) | (blue & 0xFF);
                j++;
            }
            Bitmap bmp;
            bmp = Bitmap.createBitmap(buff, resolution[0], resolution[1], Config.ARGB_8888);
            buff = null;
            return bmp;

        } catch (OutOfMemoryError e) {
            // TODO Auto-generated catch block
            Log.i(TAG, "Bitmap.createBitmap:" + e);
            return null;
        }
    }

    private void saveSnapFile(Bitmap bmp, boolean auto, File image) {
        snap = false;
        try {
            FileOutputStream outputStream = new FileOutputStream(image);
            bmp.compress(Bitmap.CompressFormat.JPEG, 100, outputStream);
            outputStream.flush();
            outputStream.close();
            outputStream = null;
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (NullPointerException e) {
            // TODO: handle exception
            e.printStackTrace();
        }
    }

    private void saveSnapFile(byte[] out, int[] resolution, boolean auto, File image) {
        snap = false;
        try {
            FileOutputStream outputStream = new FileOutputStream(image);
            ByteBuffer buffer = ByteBuffer.wrap(out, 0, resolution[0] * resolution[1] * 3);
            Bitmap bmp = Bitmap.createBitmap(resolution[0], resolution[1], Config.RGB_565);
            bmp.copyPixelsFromBuffer(buffer);
            bmp.compress(Bitmap.CompressFormat.JPEG, 100, outputStream);
            if (!auto) {
                mHandler.sendEmptyMessage(4);
            }

            outputStream.flush();
            outputStream.close();
            outputStream = null;
        } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    @Override
    protected void onStop() {
        // TODO Auto-generated method stub
        Log.i(TAG, "----------------onStop--------------------");
        if (!forceExitThread) {
            Log.i(TAG, "----------------stopThread--------------------");
            stopThread();
        }
/*
		try {
		    tutk_lock.lock();
		}
	    catch (Exception e)
	    {
					// TODO: handle exception
		}
*/
        if (mediaStreamer_tutk != null) {
            mediaStreamer_tutk.close();
            //mediaStreamer_tutk =null;
        }
/*
	   	try {
		    tutk_lock.unlock();
		}
	    catch (Exception e)
	    {
					// TODO: handle exception
		}
*/
        if (mediaStreamer_51see != null) {
            mediaStreamer_51see.close();
            mediaStreamer_51see = null;
        }
        mediaStreamer = null;
        frames = null;
//    	frames_tutk;
        frames_51see = null;
        //stopThread();
        System.gc();

        audioManager.setStreamVolume(AudioManager.STREAM_MUSIC, curVolume, 0);

        super.onStop();
    }

    public void parserResult(String result) {
        try {
            JSONObject jo = new JSONObject(result);
            String status = jo.getString("status");
            int num = jo.getInt("num");
            JSONArray resultArray = jo.getJSONArray("result");

            for (int i = 0; i < resultArray.length(); i++) {
                MyComment comment = new MyComment();
                JSONObject jsonObj = resultArray.getJSONObject(i);
                String username = jsonObj.getString("username");
                String content = jsonObj.getString("content");
                String publish_time = jsonObj.getString("publish_time");
                System.out.println("评论" + i + username + ":" + content + ":" + publish_time);

                comment.setUsername(username);
                comment.setContent(content);
                comment.setPublish_time(publish_time);
                commentList.add(comment);
            }
            System.out.println("status:" + status);
            System.out.println("num:" + num);
            System.out.println();
            if (status.equals("1")) {
                commentHandler.sendEmptyMessage(MSG_GET_COMMENT_SUCCESS);
            } else {
                //获取评论失败
            }

        } catch (JSONException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    @Override
    public void onRefresh() {
        // TODO Auto-generated method stub
        new Thread(httpGetThread).start();
    }

    public enum RecState {
        START, PAUSE, STOP
    }

    static class MyHandler extends Handler {
        WeakReference<PlayerActivity> mActivity;

        MyHandler(PlayerActivity activity) {
            mActivity = new WeakReference<PlayerActivity>(activity);
        }

        @Override
        public void handleMessage(Message msg) {
            PlayerActivity playerActivity = mActivity.get();
            playerActivity.handleMessage(msg);
        }
    }

    class DrawSurfaceRunnable implements Runnable {
        boolean recGetIFrame = false;

        @Override
        public void run() {
            // TODO Auto-generated method stub
            int[] resolution = new int[2];
            byte[] out;
            try {
                out = new byte[3 * 1920 * 1080];
            } catch (OutOfMemoryError e2) {
                // TODO Auto-generated catch block
                Log.i(TAG, "--" + e2);
                finish();
                return;
            }
            long startTime, endTime;
            while (!forceExitThread) {
                startTime = System.currentTimeMillis();
                if (recState == RecState.START) {
                    if (recGetIFrame) {
                        recorder.recordVideo(frames[iFrameIndex].getFrameData());
                    } else {
                        if (frames[iFrameIndex].isKeyFrame()) {
                            recGetIFrame = true;
                            preState = RecState.START;
                            recorder.recordVideo(frames[iFrameIndex].getFrameData());
                        }
                    }
                } else if (recState == RecState.PAUSE) {

                } else if (recState == RecState.STOP) {
                    if (preState != RecState.STOP) {
                        preState = RecState.STOP;
                        recGetIFrame = false;
                        recorder.stopRecording();
                        fileScan(videoFile);
                    }
                }

                try {
                    videoDecoder.decoderNal(nDecodeHander, frames[iFrameIndex].getFrameData(), out, resolution);
                    nVideoWidth = resolution[0];
                    nVideoHeight = resolution[1];


                } catch (NullPointerException e) {
                    // TODO: handle exception
                    e.printStackTrace();  // mediaStreamer 已经断开
                    if (preState != RecState.STOP) {
                        preState = RecState.STOP;
                        recGetIFrame = false;
                        //Log.d("record", "stop rec!!");
                        recorder.stopRecording();
                        fileScan(videoFile);
                    }
                    return;
                }

                //videoRender.draw(out, resolution[0], resolution[1]);
                try {//try catch add by 12.14
                    glSurfaceView.update(out, resolution[0], resolution[1]);
                } catch (OutOfMemoryError e1) {
                    // TODO Auto-generated catch block
                    Log.i(TAG, "--glSurfaceView.update:" + e1);
                    finish();
                } catch (NullPointerException e) {
                    Log.i(TAG, "--glSurfaceView.update:" + e);
                    finish();
                }

                if (snap) {
                    //保存拍照图片
                    snap = false;
                    try {
//							FileOutputStream outputStream = new FileOutputStream(imageFile);
                        //ByteBuffer buffer = ByteBuffer.wrap(out, 0, resolution[0]*resolution[1]*3);
//							Bitmap bmp = Bitmap.createBitmap(resolution[0], resolution[1], Config.RGB_565);
//							bmp.copyPixelsFromBuffer(buffer);
//							bmp.compress(Bitmap.CompressFormat.JPEG, 100, outputStream);
                        Bitmap bmp = RGB24ToARGB(out, resolution);
                        if (bmp != null) {
                            saveSnapFile(bmp, true, imageFile);
                            bmp.recycle();
                            bmp = null;
                        }
//							outputStream.flush();
//							outputStream.close();
                        mHandler.sendEmptyMessage(4);
                    }
//						catch (FileNotFoundException e) {
//							// TODO Auto-generated catch block
//							e.printStackTrace();
//						} catch (IOException e) {
//							// TODO Auto-generated catch block
//							e.printStackTrace();
//						}
                    catch (Exception e) {
                        // TODO: handle exception
                    }
                }
                frames[(iFrameIndex + 1) % 2] = mediaStreamer.getOneVideoFrame(-1); //  一直等到接收到第二帧才开始播放
                if (frames != null && frames[(iFrameIndex + 1) % 2] != null &&
                        frames[(iFrameIndex + 1) % 2].getTimeStamp() > frames[iFrameIndex].getTimeStamp()) {
                    iFrameIndex = (iFrameIndex + 1) % 2;
                } else if (forceExitThread) {
                    break;
                }
                endTime = System.currentTimeMillis();
                if (frames[0] != null && frames[1] != null) {
                    long waitTime = (frames[iFrameIndex].getTimeStamp() - frames[(iFrameIndex + 1) % 2].getTimeStamp()) - (endTime - startTime);
                    ////Log.d("waittime", "waitTime = " +waitTime);
                    if (waitTime > 8) {
                        try {
                            waitTime = waitTime - 8;
                            if (waitTime < 1000) {
                                Thread.sleep(waitTime);                                //屏幕翻转时会唤醒线程
                            } else {
                                //Thread.sleep(250);
                            }
                        } catch (InterruptedException e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                    }
                }
            }

            // 保存最后一张图片作为缩略图
            if (resolution[0] > 0 && resolution[1] > 0) {
                try {
                    File snapFile = openSnapFile("snapshot", deviceID + ".jpg");
                    Bitmap bitMap_ARGB = RGB24ToARGB(out, resolution);//CAUSE out of money
                    if (bitMap_ARGB != null) {
                        saveSnapFile(bitMap_ARGB, true, snapFile);
                        bitMap_ARGB.recycle();
                        bitMap_ARGB = null;
                    }
                } catch (Exception e) {
                    // TODO: handle exception
                }

            }
            out = null;
        }
    }

    public class ConnectThread extends Thread {
        String type;

        public ConnectThread(String type) {
            this.type = type;
        }

        @Override
        public void run() {
            Bundle bundle = getIntent().getExtras();
            String szID = bundle.getString("id");
            String szURL = bundle.getString("url");
            boolean isLocal = bundle.getBoolean("isLocal");
            deviceversion = bundle.getString("version");
            devicename = bundle.getString("name");
            deviceID = szID;

            forceExitThread = false;
            if (szURL == null) {//无效的IP地址
                mHandler.sendEmptyMessage(MSG_INVALID_IP);
            }

            Map<String, String> paramp = new HashMap<String, String>();
            paramp.put("UserName", "admin"); // 默认用户名
            paramp.put("Password", "admin"); // 默认密码
            paramp.put("Id", szID);
            if (isLocal) {
                mediaStreamer_51see = new LocalMediaStreamer(szURL, paramp);
                mediaStreamer = mediaStreamer_51see;
                if (mediaStreamer != null) {
                    mediaStreamer.setOnAlarmEnableListener(mOnAlarmEnableListener);
                    mediaStreamer.setOnAVQSetListener(mOnAVQSetListener);
                }

                if (mediaStreamer == null || !mediaStreamer.open()
                        || videoDecoder == null) {
                    //Log.d(TAG, "send MSG_INIT_FAIL");
                    mHandler.sendEmptyMessage(MSG_INIT_FAIL);


                } else {
                    getIFrameThread = new Thread(getIFrameRunnable);
                    frames_51see = new VideoFrame[2];
                    iFrameIndex = 0;
                    getIFrameThread.start();
                    mediaStreamer.setMediaDataListener(PlayerActivity.this);
                }

            } else if ("51see" == type) {
                Log.i(TAG, "51see");
                mediaStreamer_51see = MediaStreamFactory.create51SeeMediaStreamer(szURL, paramp);
                mediaStreamer = mediaStreamer_51see;

                if (mediaStreamer_51see != null) {
                    Log.i(TAG, "set 51see listener");
                    mediaStreamer_51see.setOnAlarmEnableListener(mOnAlarmEnableListener);
                    mediaStreamer_51see.setOnAVQSetListener(mOnAVQSetListener);
                }

                if (mediaStreamer_51see == null || !mediaStreamer_51see.open()
                        || videoDecoder == null) {
                    Log.i(TAG, "send MSG_INIT_FAIL");
                    mHandler.sendEmptyMessage(MSG_INIT_FAIL);

                } else {
                    Log.i(TAG, "getIFrameRunnable(51see)");
                    getIFrameThread = new Thread(getIFrameRunnable);
                    System.out.println("1");
                    frames_51see = new VideoFrame[2];
                    System.out.println("2");
                    iFrameIndex = 0;
                    getIFrameThread.start();
                    System.out.println("3");
                    if (mediaStreamer_51see != null)
                        mediaStreamer_51see.setMediaDataListener(PlayerActivity.this);

                    System.out.println("4");
                }
            }

        }
    }
}

